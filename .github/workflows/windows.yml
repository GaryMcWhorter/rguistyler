name: Windows

on:
  workflow_dispatch:
  release:
    types: [published]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: windows-latest

    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
      PROJECT_BUILD_PATH: "${{ github.event.repository.name }}\\projects\\VS2022\\build\\${{ github.event.repository.name }}\\bin\\x64\\Release"
      PROJECT_RELEASE_PATH: ${{ github.event.repository.name }}_dev_win_x64

    steps:
    - name: Checkout this repo
      uses: actions/checkout@master
      with:
        path: ${{ env.PROJECT_NAME }}
      
    - name: Checkout raylib repo
      uses: actions/checkout@v2
      with:
        repository: raysan5/raylib
        path: raylib
        
    # NOTE: Visual Studio project build configuration already defines all required directories where project is generated:
    # $(SolutionDir)\build\$(ProjectName)\bin\$(Platform)\$(Configuration)\
    - name: Setup Release Paths
      run: |
        echo "PROJECT_RELEASE_PATH=${{ env.PROJECT_NAME }}_v${{ github.event.release.tag_name }}_win_x64" >> $GITHUB_ENV
      shell: bash
      if: github.event_name == 'release' && github.event.action == 'published'

    - name: Setup Environment
      run: | 
        mkdir ${{ env.PROJECT_RELEASE_PATH }}
        dir
      shell: cmd

    # Setup MSBuild.exe path if required
    - name: Setup MSBuild path
      uses: microsoft/setup-msbuild@v1.1

    - name: Build raylib Library + Product (VS2022 solution)
      run: |
        dir
        cd ${{ env.PROJECT_NAME }}/projects/VS2022
        msbuild.exe ${{ env.PROJECT_NAME }}.sln /target:${{ env.PROJECT_NAME }} /property:Configuration=Release /property:Platform=x64
        cd ../..
      shell: cmd

    - name: Generate Artifacts
      run: |
        dir ${{ env.PROJECT_BUILD_PATH }}
        copy /Y ${{ env.PROJECT_BUILD_PATH }}\${{ env.PROJECT_NAME }}.exe ${{ env.PROJECT_RELEASE_PATH }}\${{ env.PROJECT_NAME }}.exe
        copy /Y ${{ env.PROJECT_NAME }}\README.md ${{ env.PROJECT_RELEASE_PATH }}\README.md
        mkdir ${{ env.PROJECT_RELEASE_PATH }}\styles
        copy /Y ${{ env.PROJECT_NAME }}\styles\jungle.rgs ${{ env.PROJECT_RELEASE_PATH }}\styles\jungle.rgs
        copy /Y ${{ env.PROJECT_NAME }}\styles\candy.rgs ${{ env.PROJECT_RELEASE_PATH }}\styles\candy.rgs
        copy /Y ${{ env.PROJECT_NAME }}\styles\bluish.rgs ${{ env.PROJECT_RELEASE_PATH }}\styles\bluish.rgs
        copy /Y ${{ env.PROJECT_NAME }}\styles\cherry.rgs ${{ env.PROJECT_RELEASE_PATH }}\styles\cherry.rgs
        copy /Y ${{ env.PROJECT_NAME }}\styles\ashes.rgs ${{ env.PROJECT_RELEASE_PATH }}\styles\ashes.rgs
        copy /Y ${{ env.PROJECT_NAME }}\styles\cyber.rgs ${{ env.PROJECT_RELEASE_PATH }}\styles\cyber.rgs
        copy /Y ${{ env.PROJECT_NAME }}\styles\lavanda.rgs ${{ env.PROJECT_RELEASE_PATH }}\styles\lavanda.rgs
        copy /Y ${{ env.PROJECT_NAME }}\styles\terminal.rgs ${{ env.PROJECT_RELEASE_PATH }}\styles\terminal.rgs
        copy /Y ${{ env.PROJECT_NAME }}\styles\dark.rgs ${{ env.PROJECT_RELEASE_PATH }}\styles\dark.rgs
        copy /Y ${{ env.PROJECT_NAME }}\styles\sunny.rgs ${{ env.PROJECT_RELEASE_PATH }}\styles\sunny.rgs
        copy /Y ${{ env.PROJECT_NAME }}\styles\enefete.rgs ${{ env.PROJECT_RELEASE_PATH }}\styles\enefete.rgs
        dir ${{ env.PROJECT_RELEASE_PATH }}
        7z a .\${{ env.PROJECT_RELEASE_PATH }}.zip .\${{ env.PROJECT_RELEASE_PATH }}
      shell: cmd

    # Issue: Double zip: https://github.com/actions/upload-artifact/issues/39
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_RELEASE_PATH }}.zip
        path: ./${{ env.PROJECT_RELEASE_PATH }}.zip
        
    # Alternative: https://github.com/marketplace/actions/gh-release
    - name: Upload Artifact to Release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: ${{ env.PROJECT_RELEASE_PATH }}.zip
        asset_path: ./${{ env.PROJECT_RELEASE_PATH }}.zip
        asset_content_type: application/zip
      if: github.event_name == 'release' && github.event.action == 'published'
